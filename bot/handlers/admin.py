from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery
import re
from aiogram import types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import markdown

from bot.data.loader import dp, bot
from bot.filters.filters import IsAdmin
from bot.keyboards.inline import kb_adm_menu, adm_list_theme, adm_edit_list_theme, adm_back_list_theme, adm_reload_channel, adm_services_list, kb_sposob_opl, del_list_channels, kb_tip_newsletter, adm_back_main, back_tip_news
from bot.state.admin import NewTheme, EditTheme, AddGroup, GetPrice, Newsletter_photo, Newsletter
from bot.data.config import db
from bot.utils.utils_functions import ded, send_back, send_admins, is_number

#–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é
@dp.message_handler(IsAdmin(), text="üë®‚Äçüíª –ê–¥–º–∏–Ω–∫–∞", state="*")
async def func_admin_menu(message: Message, state: FSMContext):
    await state.finish()
    await message.answer("üë®‚Äçüíª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=kb_adm_menu())
    
@dp.callback_query_handler(IsAdmin(), text="back_main_adm", state="*")
async def func_admin_menu(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.delete()
    await call.message.answer("üë®‚Äçüíª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=kb_adm_menu())

#–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–µ–º–∞—Ç–∏–∫ –∫–∞–Ω–∞–ª–æ–≤
@dp.callback_query_handler(IsAdmin(), text="adm_theme_channels", state="*")
async def func_admin_list_theme(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.delete()
    await bot.send_message(call.from_user.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º–∞—Ç–∏–∫–∏: ", reply_markup=await adm_list_theme())

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞—Ç–∏–∫–∏
@dp.callback_query_handler(IsAdmin(), text="add_theme", state="*")
async def func_admin_newTheme(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.delete()
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º–∞—Ç–∏–∫–∏")
    await NewTheme.name.set()
    
@dp.message_handler(state=NewTheme.name)
async def func_NewTheme_text(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    data = await state.get_data()
    await db.new_theme(name = data['name'])
    await message.answer('–¢–µ–º–∞—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=await adm_list_theme())
    
#–û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–µ–º–∞—Ç–∏–∫–∏
@dp.callback_query_handler(text_startswith="adm_change_theme", state="*")
async def func_open_theme_adm(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.delete()
    theme_id = call.data.split(":")[1]
    channel_info = await db.list_chat_theme(theme_id=theme_id)
    theme_info = await db.get_theme(id=theme_id)
    msg1 = ""
    msg2 = ""
    for i, list in enumerate(channel_info):
        chat = await bot.get_chat(list['chat_id'])
        if chat['type'] == 'channel':
            msg1 += f"<a href='{chat['invite_link']}'>{chat['title']}</a>\n"
        elif chat['type'] == 'supergroup':
            msg2 += f"<a href='{chat['invite_link']}'>{chat['title']}</a>\n"
    await call.message.answer(ded(f"""üÜî ID: <b>{theme_info['id']}</b>
                                  üé≤ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{theme_info['name']}</b>

                                  üî¢ –ö–∞–Ω–∞–ª–æ–≤/–ì—Ä—É–ø–ø —Å —ç—Ç–æ–π —Ç–µ–º–∞—Ç–∏–∫–æ–π: <b>{len(channel_info)}</b>
                                  
                                  üì¢ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:
                                  {msg1}
                                  üë• –°–ø–∏—Å–æ–∫ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø:
                                  {msg2}"""), reply_markup=adm_edit_list_theme(theme_id = theme_info['id']))

#–†–∞—Å—Å—ã–ª–∫–∞
@dp.callback_query_handler(IsAdmin(), text="newsletter", state="*")
async def func_newsletter_tip(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.delete()
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kb_tip_newsletter())
    
@dp.callback_query_handler(IsAdmin(), text_startswith="msg", state="*")
async def func_newsletter_msg(call: CallbackQuery, state: FSMContext):
    await call.message.delete()
    type_id = call.data.split(":")[1]
    if type_id == 'text':
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=back_tip_news())
        await Newsletter.msg.set()
    elif type_id == 'photo':
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=back_tip_news())
        await Newsletter_photo.msg.set()
    
@dp.message_handler(state=Newsletter_photo.msg)
async def func_newsletter_text(message: Message, state: FSMContext):
    msg = message.parse_entities()
    await state.update_data(msg=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=adm_back_main())
    await Newsletter_photo.photo.set()
    
@dp.message_handler(IsAdmin(), content_types=['photo'], state=Newsletter_photo.photo)
async def mail_photo_starts(message: Message, state: FSMContext):
    photo = message.photo[-1].file_id
    await state.update_data(photo=photo)
    data = await state.get_data()
    await send_admins(f"<b>‚ùó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} –∑–∞–ø—É—Å—Ç–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É!</b>")
    users = await db.all_users()
    yes_users, no_users = 0, 0
    for user in users:
        user_id = user['id']
        try:
            user_id = user['user_id']
            await bot.send_photo(chat_id=user_id, photo=data['photo'] ,caption=data['msg'])
            yes_users += 1
        except:
            no_users += 1

    new_msg = f"""
<b>üíé –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{len(await db.all_users())}</code>
‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <code>{yes_users}</code>
‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω): <code>{no_users}</code></b>
    """

    await message.answer(new_msg)
    await state.finish()
    
@dp.message_handler(state=Newsletter.msg)
async def func_newsletter_text(message: Message, state: FSMContext):
    await state.update_data(msg=message.text)
    data = await state.get_data()
    await send_admins(f"<b>‚ùó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{message.from_user.username} –∑–∞–ø—É—Å—Ç–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É!</b>")
    users = await db.all_users()
    yes_users, no_users = 0, 0
    for user in users:
        user_id = user['id']
        try:
            user_id = user['user_id']
            await bot.send_message(chat_id=user_id, text=data['msg'])
            yes_users += 1
        except:
            no_users += 1

    new_msg = f"""
<b>üíé –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{len(await db.all_users())}</code>
‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <code>{yes_users}</code>
‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω): <code>{no_users}</code></b>
    """

    await message.answer(new_msg)
    await state.finish()

#–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º–∞—Ç–∏–∫–∏
@dp.callback_query_handler(text_startswith="edit_name_theme", state="*")
async def func_edit_name_theme(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.delete()
    theme_id = call.data.split(":")[1]
    await call.message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º–∞—Ç–∏–∫–∏")
    await EditTheme.name.set()
    await state.update_data(theme_id=theme_id)
    
@dp.message_handler(state=EditTheme.name)
async def func_NewTheme_text(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    data = await state.get_data()
    await db.edit_theme_name(id=data['theme_id'], name=data['name'])
    await message.answer("–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ", reply_markup=adm_back_list_theme())

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ö–∞–Ω–∞–ª–æ–≤/–ì—Ä—É–ø–ø
@dp.callback_query_handler(text_startswith="add_channel_theme", state="*")
async def func_add_channel(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.delete()
    theme_id = call.data.split(":")[1]
    await call.message.answer("–£–∫–∞–∂–∏—Ç–µ –∞–π–¥–∏ –∫–∞–Ω–∞–ª–∞/–≥—Ä—É–ø–ø—ã\n–ù–∞–ø—Ä–∏–º–µ—Ä <b>-123456789</b>")
    await AddGroup.channel_id.set()
    await state.update_data(theme_id=theme_id)

#–£–¥–∞–ª–µ–Ω–∏–µ –ö–∞–Ω–∞–ª–æ–≤/–ì—Ä—É–ø–ø
@dp.callback_query_handler(text_startswith="del_channel_theme", state="*")
async def func_del_chats(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.delete()
    theme_id = call.data.split(":")[1]
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ö–∞–Ω–∞–ª/–ì—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup= await del_list_channels(theme_id=theme_id))
    
@dp.callback_query_handler(text_startswith="del_chat", state="*")
async def func_del_chats2(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.delete()
    theme_id = call.data.split(":")[1]
    channel_id = call.data.split(":")[2]
    await db.delete_order(theme_id=theme_id, chat_id=channel_id)
    # await call.message.answer("–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ", reply_markup=adm_back_delete(theme_id=theme_id))
    channel_info = await db.list_chat_theme(theme_id=theme_id)
    theme_info = await db.get_theme(id=theme_id)
    msg1 = ""
    msg2 = ""
    for i, list in enumerate(channel_info):
        chat = await bot.get_chat(list['chat_id'])
        if chat['type'] == 'channel':
            msg1 += f"<a href='{chat['invite_link']}'>{chat['title']}</a>\n"
        elif chat['type'] == 'supergroup':
            msg2 += f"<a href='{chat['invite_link']}'>{chat['title']}</a>\n"
    await call.message.answer(ded(f"""üÜî ID: <b>{theme_info['id']}</b>
                                  üé≤ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{theme_info['name']}</b>

                                  üî¢ –ö–∞–Ω–∞–ª–æ–≤/–ì—Ä—É–ø–ø —Å —ç—Ç–æ–π —Ç–µ–º–∞—Ç–∏–∫–æ–π: <b>{len(channel_info)}</b>
                                  
                                  üì¢ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:
                                  {msg1}
                                  üë• –°–ø–∏—Å–æ–∫ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø:
                                  {msg2}"""), reply_markup=adm_edit_list_theme(theme_id = theme_info['id']))
    
@dp.message_handler(state=AddGroup.channel_id)
async def func_addGroup_text(message: Message, state: FSMContext):
    await state.update_data(channel_id=message.text)
    data = await state.get_data()
    try:
        chat = await bot.get_chat(data['channel_id'])
        await db.new_chat(chat_id=chat['id'], theme_id=data['theme_id'], chat_type=chat['type'])
        await bot.send_message(message.from_user.id, "–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=adm_back_list_theme())
    except Exception as e:
        await bot.send_message(message.from_user.id, f'–û—à–∏–±–∫–∞: {e}', reply_markup=adm_reload_channel(data['theme_id']))
        
#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥
@dp.callback_query_handler(IsAdmin(), text="adm_services", state="*")
async def func_adm_servises(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.delete()
    await bot.send_message(call.from_user.id, "–î–æ—Å—Ç—É–ø–Ω—ã—ã–π —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥", reply_markup=await adm_services_list())    
    
@dp.callback_query_handler(text_startswith="no", state="*")
async def func_no(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.delete()
    unix = call.data.split(":")[1]
    order_info = await db.get_orders(unix=unix)
    if order_info['status'] == 'waiting':
        await db.edit_order_status(unix=unix, status='rejected')
        await bot.send_message(int(order_info['user_id']), "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    else:
        await call.message.answer("–£–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")
    
@dp.callback_query_handler(text_startswith="yes", state="*")
async def func_yes(call: CallbackQuery, state: FSMContext):
    await state.finish()
    unix = call.data.split(":")[1]
    order_info = await db.get_orders(unix=unix)
    if order_info['status'] == 'waiting':
        await db.edit_order_status(unix=unix, status='accepted')
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        if order_info['video_id'] or order_info['photo_id']:
            await bot.edit_message_caption(chat_id=chat_id, message_id=message_id, caption="<b>–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É</b>")
        else:
            await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text="<b>–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É</b>")
        await GetPrice.price.set()
        await state.update_data(unix = unix)
    else:
        await call.message.answer("–£–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ")

@dp.message_handler(state=GetPrice.price)
async def func_Getprice_text(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    data = await state.get_data()
    if is_number(data['name']):
        order_info = await db.get_orders(unix=data['unix'])
        await db.edit_order_status(unix=data['unix'], price=data['name'])
        await send_back(user_id=order_info['user_id'], msg=ded(f"""{order_info['msg']}
                                                            üü∞üü∞üü∞üü∞üü∞üü∞üü∞
                                                            <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞</b>
                                                            <b>–ö –æ–ø–ª–∞—Ç–µ:</b> <i>{data['name']}</i>"""), photo=order_info['photo_id'], video=order_info['video_id'], reply_markup=kb_sposob_opl(unix=data['unix'], price=data['name']))
    else:
        await message.answer("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ!")